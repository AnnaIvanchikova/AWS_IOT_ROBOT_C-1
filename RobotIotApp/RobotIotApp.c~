#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <unistd.h>
#include <limits.h>
#include <string.h>

#include "aws_iot_config.h"
#include "aws_iot_log.h"
#include "aws_iot_version.h"
#include "aws_iot_mqtt_client_interface.h"
#include "aws_iot_shadow_interface.h"

#define MAX_LENGTH_OF_UPDATE_JSON_BUFFER 200

static char* protocol_str[] = {"GO", "STOP", "LEFT", "RIGHT"};
enum protocol {COMMAND_GO, COMMAND_STOP, COMMAND_LEFT, COMMAND_RIGHT};

static char* state_type_str[] = {"GO", "STOP"};
enum state_type {GO, STOP};

static char* sensor_type_str[] = {"NONE", "WALL", "DEEP"};
enum sensor_type {NONE, WALL, DEEP} ;

enum direction_type {UP, DOWN, LEFT, RIGHT};
enum direction_type currentDirection;

struct matrix {
	int rows;
	int cols;
	int **m;
};

struct matrix field;

struct position {
	int i;
	int j;
};

struct position currentPosition;

struct robotState {
	enum state_type state;
	enum sensor_type sensor;
};

struct robotState currentRobotState;

AWS_IoT_Client mqttClient;
char certDirectory[PATH_MAX + 1] = "../../../certs";
static char filename[PATH_MAX + 1] = "data.txt";
char HostAddress[255] = AWS_IOT_MQTT_HOST;
uint32_t port = AWS_IOT_MQTT_PORT;
int shiftList[4][2] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}}; // for next step checking

char* topicName;
int qosLevel; 

//TODO bool
void checkNextStep() {
	enum sensor_type next = (enum sensor_type) field.m[currentPosition.i + 
		shiftList[currentDirection][0], currentPosition.j + shiftList[currentDirection][1]];
	printf("%s", sensor_type_str[next]);
}

uint32_t publishCount = 3;

static bool readDataFromFile() {
	int i;
	int j;
	FILE *fp;
	topicName = (char*)malloc(sizeof(char)* 100);

	fp = fopen(filename, "rt");

	if (fp == NULL) {
		return false;
	}

	fscanf(fp, "%s", topicName);
	fscanf(fp, "%d", &qosLevel);
	fscanf(fp, "%d %d", &field.rows, &field.cols);

	//printf("%s %d %d %d\n", topicName, qosLevel, field.rows, field.cols);

	field.m = malloc(field.rows*sizeof(int*));
		
	for (i = 0; i < field.rows; i++) {
		field.m[i] = malloc(field.cols*sizeof(int));
	}

	for (i = 0; i < field.rows; i++){
		for(j = 0; j < field.cols; j++) {
			fscanf(fp, "%d", &field.m[i][j]);
		}
	}

	/*for (i = 0; i < field.rows; i++){
		for(j = 0; j < field.cols; j++) {
			printf("%d ", field.m[i][j]);
		}
		printf("%s", "\n");
	}*/

	fscanf(fp, "%d %d", &currentPosition.i, &currentPosition.j);
	currentDirection = DOWN;
	fclose(fp);
	return true;
}

void iot_subscribe_callback_handler(AWS_IoT_Client *pClient, char *topicName, uint16_t topicNameLen,
									IoT_Publish_Message_Params *params, void *pData) {
	IOT_UNUSED(pData);
	IOT_UNUSED(pClient);
	IOT_INFO("Subscribe callback");
	IOT_INFO("%.*s\t%.*s", topicNameLen, topicName, (int) params->payloadLen, (char*)params->payload);
}

void disconnectCallbackHandler(AWS_IoT_Client *pClient, void *data) {
	IOT_WARN("MQTT Disconnect");
	IoT_Error_t rc = FAILURE;

	if(NULL == pClient) {
		return;
	}

	IOT_UNUSED(data);

	if(aws_iot_is_autoreconnect_enabled(pClient)) {
		IOT_INFO("Auto Reconnect is enabled, Reconnecting attempt will start now");
	} else {
		IOT_WARN("Auto Reconnect not enabled. Starting manual reconnect...");
		rc = aws_iot_mqtt_attempt_reconnect(pClient);
		if(NETWORK_RECONNECTED == rc) {
			IOT_WARN("Manual Reconnect Successful");
		} else {
			IOT_WARN("Manual Reconnect Failed - %d", rc);
		}
	}
}

void parseInputArgsForConnectParams(int argc, char **argv) {
	int opt;

	while(-1 != (opt = getopt(argc, argv, "h:p:c:x:"))) {
		switch(opt) {
			case 'h':
				strcpy(HostAddress, optarg);
				IOT_DEBUG("Host %s", optarg);
				break;
			case 'p':
				port = atoi(optarg);
				IOT_DEBUG("arg %s", optarg);
				break;
			case 'c':
				strcpy(certDirectory, optarg);
				IOT_DEBUG("cert root directory %s", optarg);
				break;
			case 'x':
				publishCount = atoi(optarg);
				IOT_DEBUG("publish %s times\n", optarg);
				break;
			case '?':
				if(optopt == 'c') {
					IOT_ERROR("Option -%c requires an argument.", optopt);
				} else if(isprint(optopt)) {
					IOT_WARN("Unknown option `-%c'.", optopt);
				} else {
					IOT_WARN("Unknown option character `\\x%x'.", optopt);
				}
				break;
			default:
				IOT_ERROR("Error in command line argument parsing");
				break;
		}
	}

}

void publishMessage() {
	
}

void publishRobotState() {
	
}

void ShadowUpdateStatusCallback(const char *pThingName, ShadowActions_t action, Shadow_Ack_Status_t status,const char *pReceivedJsonDocument, void *pContextData) {
	IOT_UNUSED(pThingName);
	IOT_UNUSED(action);
	IOT_UNUSED(pReceivedJsonDocument);
	IOT_UNUSED(pContextData);

	if(SHADOW_ACK_TIMEOUT == status) {
		IOT_INFO("Update Timeout--");
	} else if(SHADOW_ACK_REJECTED == status) {
		IOT_INFO("Update RejectedXX");
	} else if(SHADOW_ACK_ACCEPTED == status) {
		IOT_INFO("Update Accepted !!");
	}
}

/*void windowActuate_Callback(const char *pJsonString, uint32_t JsonStringDataLen, jsonStruct_t *pContext) {
	IOT_UNUSED(pJsonString);
	IOT_UNUSED(JsonStringDataLen);

	if(pContext != NULL) {
		IOT_INFO("Delta - Window state changed to %d", *(bool *) (pContext->pData));
	}
}*/

bool connectToThingAndSubscribeToTopic(int argc, char **argv) {
	IoT_Error_t rc = FAILURE;
	char rootCA[PATH_MAX + 1];
	char clientCRT[PATH_MAX + 1];
	char clientKey[PATH_MAX + 1];
	char CurrentWD[PATH_MAX + 1];
	IoT_Publish_Message_Params paramsQOS0;
	getcwd(CurrentWD, sizeof(CurrentWD));
	snprintf(rootCA, PATH_MAX + 1, "%s/%s/%s", CurrentWD, certDirectory, AWS_IOT_ROOT_CA_FILENAME);
	snprintf(clientCRT, PATH_MAX + 1, "%s/%s/%s", CurrentWD, certDirectory, AWS_IOT_CERTIFICATE_FILENAME);
	snprintf(clientKey, PATH_MAX + 1, "%s/%s/%s", CurrentWD, certDirectory, AWS_IOT_PRIVATE_KEY_FILENAME);
	char JsonDocumentBuffer[MAX_LENGTH_OF_UPDATE_JSON_BUFFER];
	size_t sizeOfJsonDocumentBuffer = sizeof(JsonDocumentBuffer) / sizeof(JsonDocumentBuffer[0]);
	char *pJsonStringToUpdate;
	ShadowInitParameters_t sp = ShadowInitParametersDefault;
	IoT_Client_Init_Params mqttInitParams = iotClientInitParamsDefault;
	
	sp.pHost = AWS_IOT_MQTT_HOST;
	sp.port = AWS_IOT_MQTT_PORT;
	sp.pClientCRT = clientCRT;
	sp.pClientKey = clientKey;
	sp.pRootCA = rootCA;
	sp.enableAutoReconnect = false;
	sp.disconnectHandler = NULL;
	IOT_INFO("Shadow Init");
	rc = aws_iot_shadow_init(&mqttClient, &sp);

	if(SUCCESS != rc) {
		IOT_ERROR("Shadow Connection Error");
		return false;
	}

	ShadowConnectParameters_t scp = ShadowConnectParametersDefault;
	IoT_Client_Connect_Params connectParams = iotClientConnectParamsDefault;
	scp.pMyThingName = AWS_IOT_MY_THING_NAME;
	scp.pMqttClientId = AWS_IOT_MQTT_CLIENT_ID;
	scp.mqttClientIdLen = (uint16_t) strlen(AWS_IOT_MQTT_CLIENT_ID);

	IOT_INFO("Shadow Connect");
	rc = aws_iot_shadow_connect(&mqttClient, &scp);
	if(SUCCESS != rc) {
		IOT_ERROR("Shadow Connection Error");
		return false;
	}

	mqttInitParams.enableAutoReconnect = false; // We enable this later below
	mqttInitParams.pHostURL = HostAddress;
	mqttInitParams.port = port;
	mqttInitParams.pRootCALocation = rootCA;
	mqttInitParams.pDeviceCertLocation = clientCRT;
	mqttInitParams.pDevicePrivateKeyLocation = clientKey;
	mqttInitParams.mqttCommandTimeout_ms = 20000;
	mqttInitParams.tlsHandshakeTimeout_ms = 5000;
	mqttInitParams.isSSLHostnameVerify = true;
	mqttInitParams.disconnectHandler = disconnectCallbackHandler;
	mqttInitParams.disconnectHandlerData = NULL;

	rc = aws_iot_mqtt_init(&mqttClient, &mqttInitParams);

	if(SUCCESS != rc) {
		IOT_ERROR("aws_iot_mqtt_init returned error : %d ", rc);
		return rc;
	}

	connectParams.keepAliveIntervalInSec = 10;
	connectParams.isCleanSession = true;
	connectParams.MQTTVersion = MQTT_3_1_1;
	connectParams.pClientID = AWS_IOT_MQTT_CLIENT_ID;
	connectParams.clientIDLen = (uint16_t) strlen(AWS_IOT_MQTT_CLIENT_ID);
	connectParams.isWillMsgPresent = false;

	IOT_INFO("Connecting...");
	rc = aws_iot_mqtt_connect(&mqttClient, &connectParams);
	if(SUCCESS != rc) {
		IOT_ERROR("Error(%d) connecting to %s:%d", rc, mqttInitParams.pHostURL, mqttInitParams.port);
		return rc;
	}

	/*
	 * Enable Auto Reconnect functionality
	 */
	rc = aws_iot_shadow_set_autoreconnect_status(&mqttClient, true);

	if(SUCCESS != rc) {
		IOT_ERROR("Unable to set Auto Reconnect to true - %d", rc);
		return false;
	}

	rc = aws_iot_mqtt_autoreconnect_set_status(&mqttClient, true);
	if(SUCCESS != rc) {
		IOT_ERROR("Unable to set Auto Reconnect to true - %d", rc);
		return false;
	}

	IOT_INFO("Subscribing...");
	rc = aws_iot_mqtt_subscribe(&mqttClient, topicName, 13, QOS0, iot_subscribe_callback_handler, NULL);
	if(SUCCESS != rc) {
		IOT_ERROR("Error subscribing : %d ", rc);
		return false;
	}

	return true;
}


int main(int argc, char **argv) {
	parseInputArgsForConnectParams(argc, argv);

	if (readDataFromFile()) {
		if(connectToThingAndSubscribeToTopic(argc, argv)) {
			printf("%s", "OK");
		}	
		return 0;
	}
	else {
		printf("Problem with file %s", filename);
		return -1;
	}

	while(true) {
		
	}
	
	/*bool infiniteFlag = true;
	

	paramsQOS0.qos = QOS0;
	paramsQOS0.payload = (void *) cPayload;
	paramsQOS0.isRetained = 0;

	paramsQOS1.qos = QOS1;
	paramsQOS1.payload = (void *) cPayload;
	paramsQOS1.isRetained = 0;

	while((NETWORK_ATTEMPTING_RECONNECT == rc || NETWORK_RECONNECTED == rc || SUCCESS == rc) ||
		  infiniteFlag) {

		//Max time the yield function will wait for read messages
		rc = aws_iot_mqtt_yield(&client, 1000);
		if(NETWORK_ATTEMPTING_RECONNECT == rc) {
			// If the client is attempting to reconnect we will skip the rest of the loop.
			continue;
		}

			IOT_INFO("-->sleep");
			sleep(3);
			sprintf(cPayload, "%s : %d ", "hello from SDK QOS0", i++);
			paramsQOS0.payloadLen = strlen(cPayload);
			rc = aws_iot_mqtt_publish(&client, topicName, 13, &paramsQOS0);
			if(publishCount > 0) {
				publishCount--;
			}

			sprintf(cPayload, "%s : %d ", "hello from SDK QOS1", i++);
			paramsQOS1.payloadLen = strlen(cPayload);
			do {
				rc = aws_iot_mqtt_publish(&client, topicName, 13, &paramsQOS1);
				if(publishCount > 0) {
					publishCount--;
				}
			} while(MQTT_REQUEST_TIMEOUT_ERROR == rc && (publishCount > 0));
	}
	if(SUCCESS != rc) {
		IOT_ERROR("An error occurred in the loop.\n");
	} else {
		IOT_INFO("Publish done\n");
	}

	return rc;*/
}
